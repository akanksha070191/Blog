"""
Django settings for blog_project project.

Generated by 'django-admin startproject' using Django 5.1.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-)iizf7m9o31(r9)tv20-&e-d92en5a&bf(3w9l14ra+&+$353y'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'blogapp',
    'django.contrib.humanize',
    'tinymce',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'blog_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates", ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'blog_project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'blogs',
        'USER': 'blog',
        'PASSWORD': 'blog@2025',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


TINYMCE_DEFAULT_CONFIG = {
    'height': 500,
    'width': 800,
    'plugins': 'image, media, link, code, table, lists',
    'toolbar': 'undo redo | bold italic underline | alignleft aligncenter alignright alignjustify | bullist numlist outdent indent | image media link | code',
    'image_caption': True,
    'automatic_uploads': True,
    'file_picker_types': 'image media',
    'media_live_embeds': True,  # Enable live preview for media
    'media_alt_source': False,   # Optional: Disable alternative sources if not needed
    'image_advtab': True,
    'relative_urls': False,
    'file_browser_callback_types': 'file image media',
    'image_class_list': [
        {'title': 'Left', 'value': 'img-left'},
        {'title': 'Right', 'value': 'img-right'},
        {'title': 'Center', 'value': 'img-center'},
    ],
    'file_picker_callback': """
        function(callback, value, meta) {
            var input = document.createElement('input');
            input.setAttribute('type', 'file');

            // Check file type for image or media
            if (meta.filetype === 'image') {
                input.setAttribute('accept', 'image/*');
            } else if (meta.filetype === 'media') {
                input.setAttribute('accept', 'video/*');
            }

            input.onchange = function() {
                var file = this.files[0];
                var formData = new FormData();
                formData.append('file', file);

                fetch('/upload/', {  // Your Django upload URL
                    method: 'POST',
                    body: formData
                })
                .then(response => response.json())
                .then(data => {
                    callback(data.location);  // Use the uploaded file URL
                });
            };
            input.click();
        }
    """,
}

# Increase to 10MB (adjust as needed)
DATA_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 10MB in bytes

# Optional: Increase FILE_UPLOAD_MAX_MEMORY_SIZE for file uploads
FILE_UPLOAD_MAX_MEMORY_SIZE = 52428800  # 10MB in bytes

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR,  'media')



# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
